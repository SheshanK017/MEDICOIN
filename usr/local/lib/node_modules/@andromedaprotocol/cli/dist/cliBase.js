"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const storage_1 = require("./config/storage");
const inquirer_1 = __importDefault(require("inquirer"));
const minimist_1 = __importDefault(require("minimist"));
const _1 = require(".");
// Register command type prompt
const inquirerCommandPrompt = require("inquirer-command-prompt");
const inquirerAutocompletePrompt = require("inquirer-autocomplete-prompt");
const InterruptedPrompt = require("inquirer-interrupted-prompt");
inquirer_1.default.registerPrompt("autocomplete", inquirerAutocompletePrompt);
InterruptedPrompt.fromAll(inquirer_1.default);
inquirer_1.default.registerPrompt("command", inquirerCommandPrompt);
async function onStartup() {
    try {
        await (0, _1.displaySpinnerAsync)(`Loading config from ${storage_1.CONFIG_DIRECTORY}...`, _1.loadDefaultConfig);
        await (0, _1.displaySpinnerAsync)("Connecting client...", async () => await _1.State.connectClient());
    }
    catch (error) {
        console.error(error);
    }
}
async function start() {
    await onStartup();
    const inputs = process.argv.slice(2);
    if (inputs.length === 0) {
        await (0, _1.title)();
        while (true) {
            let input = await (0, _1.ask)();
            const { _: cmd, ...flags } = (0, minimist_1.default)((0, _1.parseInput)(input.command));
            await (0, _1.handle)(cmd, flags, _1.baseCommands);
        }
    }
    else {
        const { _: cmd, ...flags } = (0, minimist_1.default)((0, _1.parseInput)(inputs.join(" ")));
        await (0, _1.handle)(cmd, flags, _1.baseCommands);
        process.exit();
    }
}
exports.start = start;
