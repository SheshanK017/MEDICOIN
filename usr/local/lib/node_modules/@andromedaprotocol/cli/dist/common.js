"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ordinalSuffix = exports.clearPreviousLines = exports.promptPassphrase = exports.printTransactionUrl = exports.instantiateFlags = exports.executeFlags = exports.displaySpinnerAsync = exports.validateOrRequest = exports.logTableConfig = exports.sleep = void 0;
const andromeda_js_1 = require("@andromedaprotocol/andromeda.js");
const cli_spinner_1 = require("cli-spinner");
const cmd_1 = require("./cmd");
const config_1 = __importDefault(require("./config"));
const state_1 = __importDefault(require("./state"));
const picocolors_1 = __importDefault(require("picocolors"));
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
exports.sleep = sleep;
/**
 * Default config for printing a table
 */
exports.logTableConfig = {
    chars: {
        top: "",
        "top-mid": "",
        "top-left": "",
        "top-right": "",
        bottom: "",
        "bottom-mid": "",
        "bottom-left": "",
        "bottom-right": "",
        left: "",
        "left-mid": "",
        mid: "",
        "mid-mid": "",
        right: "",
        "right-mid": "",
        middle: " ",
    },
    style: { "padding-left": 0, "padding-right": 0 },
};
/**
 * Validates command parameters or requests them if they are not already provided
 * @param message The parameter request message
 * @param input The user's input (if any)
 * @param validate A function to validate the input
 * @param choices Used when a list of choices is required
 * @returns
 */
async function validateOrRequest(message, input, validate, choices, hiddenInput, defaultValue) {
    //If the user provided input then validate
    if (input) {
        if (typeof input === "string" && cmd_1.exitInputs.includes(input.trim()))
            throw new Error("Prompt exited");
        const valid = !validate || (await validate(input));
        if (valid) {
            return input;
        }
    }
    const prompt = await (choices
        ? (0, cmd_1.promptWithExit)({
            type: "autocomplete",
            suggestOnly: true,
            message,
            name: `requestinput`,
            validate,
            source: (_answers, input = '') => {
                if (input.trim() === '')
                    return choices;
                return choices.filter(c => c.includes(input));
            },
        })
        : (0, cmd_1.promptWithExit)({
            type: hiddenInput ? "password" : "input",
            message,
            name: `requestinput`,
            validate,
            default: defaultValue
        }));
    return prompt.requestinput;
}
exports.validateOrRequest = validateOrRequest;
/**
 * Displays a spinner alongside the provided text. Primarily used for asynchronous actions.
 * @param text The text to display
 * @param cb The callback to call while displaying the spinner
 * @returns The returned value from the provided callback
 */
async function displaySpinnerAsync(text, cb) {
    const spinner = new cli_spinner_1.Spinner(text);
    spinner.setSpinnerString(1);
    spinner.start();
    try {
        const resp = await cb();
        return resp;
    }
    catch (error) {
        throw error;
    }
    finally {
        spinner.stop();
        console.log();
    }
}
exports.displaySpinnerAsync = displaySpinnerAsync;
/**
 * Flags common to all execute handlers
 */
exports.executeFlags = {
    funds: {
        description: "Funds to send with the message",
        usage: "--funds 100ujunox",
    },
    memo: {
        description: "An optional memo to attach to the message",
        usage: "--memo 'Wow what a great transaction!'",
    },
    simulate: {
        description: `Simulates the transaction without broadcasting it. Useful to estimate gas costs. ${picocolors_1.default.bold("Without this flag the message is simulated before broadcasting.")}`,
    },
    print: {
        description: "Prints the constructed message before simulating.",
    },
};
/**
 * Flags common to all instantiation handlers
 */
exports.instantiateFlags = {
    label: {
        description: "Used to provide a label assigned to the instantiation",
        usage: "--label 'Wow what a great label'",
    },
    admin: {
        description: "Used to provide an alternative admin address for the contract",
        usage: "--admin andr1...",
    },
    simulate: {
        description: `Simulates the transaction without broadcasting it. Useful to estimate gas costs. ${picocolors_1.default.bold("Without this flag the message is simulated before broadcasting.")}`,
    },
    print: {
        description: "Prints the constructed message before simulating.",
    },
};
/**
 * Used to print a URL for a transaction hash. Always uses the first URL provided by the config unless otherwise provided.
 * @param hash The transaction hash
 * @param urlIdx The index of the URL to use
 */
function printTransactionUrl(hash, urlIdx = 0) {
    const urls = config_1.default.get("chain.blockExplorerTxPages");
    if (urls.length === 0)
        return;
    const txUrls = urls.map((url) => (0, andromeda_js_1.getTxExplorerURL)(hash, url));
    console.log(txUrls[urlIdx]);
}
exports.printTransactionUrl = printTransactionUrl;
/**
 * Prompts the user for a passphrase
 * @param walletName Optional wallet name for validation
 * @param message Override for the prompt message
 * @returns The input passphrase
 */
async function promptPassphrase(walletName, message) {
    const passphraseValue = await (0, cmd_1.promptWithExit)({
        message: message ??
            (walletName
                ? `Input passphrase for wallet ${walletName}:`
                : `Input passphrase:`),
        validate: async (input) => {
            try {
                if (walletName) {
                    try {
                        const wallet = state_1.default.wallets.getWallet(walletName);
                        if (wallet) {
                            // Validate the passphrase
                            await wallet.getAddress(input);
                        }
                    }
                    catch (error) {
                        return "Incorrect passphrase";
                    }
                }
                return input.length > 0 ? true : "Passphrase cannot be empty";
            }
            catch (error) {
                return false;
            }
        },
        type: "password",
        name: "passphrase",
    });
    return passphraseValue.passphrase ?? "";
}
exports.promptPassphrase = promptPassphrase;
/**
 * Removes the previous output lines
 * @param linesToClear Amount of lines to clear, defaults to 1
 */
function clearPreviousLines(linesToClear = 1) {
    for (let i = 0; i < linesToClear; i++) {
        process.stdout.moveCursor(0, -1);
        process.stdout.clearLine(1);
    }
}
exports.clearPreviousLines = clearPreviousLines;
/**
 * Attaches an ordinal suffix to a given number and returns it as a string.
 * Taken from: https://stackoverflow.com/questions/13627308/add-st-nd-rd-and-th-ordinal-suffix-to-a-number
 * @param number
 * @returns
 */
function ordinalSuffix(number) {
    const j = number % 10, k = number % 100;
    if (j == 1 && k != 11) {
        return number + "st";
    }
    if (j == 2 && k != 12) {
        return number + "nd";
    }
    if (j == 3 && k != 13) {
        return number + "rd";
    }
    return number + "th";
}
exports.ordinalSuffix = ordinalSuffix;
