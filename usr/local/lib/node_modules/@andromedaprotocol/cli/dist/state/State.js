"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const andromeda_js_1 = __importDefault(require("@andromedaprotocol/andromeda.js"));
const stargate_1 = require("@cosmjs/stargate");
const WalletStore_1 = __importDefault(require("./WalletStore"));
const picocolors_1 = __importDefault(require("picocolors"));
const config_1 = __importDefault(require("../config"));
/**
 * A class to store the current CLI state including the Andromeda Client used and any wallet related info
 */
class State {
    constructor() {
        // The Andromeda Client providing connection to the current chain
        this.client = new andromeda_js_1.default();
        // The wallets stored and used by the CLI
        this.wallets = new WalletStore_1.default();
    }
    /**
     * What is printed before the command prompt
     */
    get CLIPrefix() {
        const chainId = config_1.default.get("chain.chainId");
        const connectedStatus = this.client.isConnected
            ? ""
            : picocolors_1.default.red("<DISCONNECTED>");
        const walletStatus = this.wallets.CLIPrefix;
        return `${walletStatus}@${chainId}${connectedStatus}`;
    }
    /**
     * Connects the Andromeda Client to chain. Has a default timeout to prevent infinite awaiting.
     */
    async connectClient() {
        const { chainUrl, defaultFee, addressPrefix, kernelAddress, chainId } = config_1.default.get("chain");
        const { client, wallets } = this;
        const currentWallet = wallets.currentWallet;
        const passphrase = currentWallet
            ? await wallets.getWalletPassphrase(currentWallet.name, chainId)
            : "";
        const signer = currentWallet
            ? await currentWallet.getWallet(passphrase)
            : undefined;
        return await new Promise((resolve, reject) => {
            client
                .connect(chainUrl, kernelAddress, addressPrefix, signer, {
                gasPrice: stargate_1.GasPrice.fromString(defaultFee),
            })
                .then(() => resolve(undefined))
                .catch((err) => {
                console.error(err);
                resolve(undefined);
            });
            // Set timeout for client connection
            setTimeout(() => reject(picocolors_1.default.red("Client connection timed out")), 30000);
        });
    }
}
exports.State = State;
const state = new State();
exports.default = state;
