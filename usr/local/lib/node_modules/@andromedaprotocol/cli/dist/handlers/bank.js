"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commands = void 0;
const amino_1 = require("@cosmjs/amino");
const cmd_1 = require("../cmd");
const picocolors_1 = __importDefault(require("picocolors"));
const common_1 = require("../common");
const state_1 = __importDefault(require("../state"));
const utils_1 = require("./utils");
const { client } = state_1.default;
exports.commands = {
    send: {
        handler: handleSend,
        color: picocolors_1.default.green,
        description: "Send tokens to another address",
        usage: "bank send <recipient address> <amount>",
        inputs: [
            {
                requestMessage: "Input Recipient Address:",
                validate: utils_1.validateAddressInput,
            },
            {
                requestMessage: "Input Amount to Send:",
                validate: (input) => {
                    try {
                        (0, amino_1.parseCoins)(input);
                        return true;
                    }
                    catch (error) {
                        console.log();
                        console.log(picocolors_1.default.red("Invalid amount to send"));
                        return false;
                    }
                },
                transform: (input) => {
                    return (0, amino_1.parseCoins)(input);
                },
            },
        ],
    },
    balance: {
        handler: handleBalance,
        color: picocolors_1.default.blue,
        description: "Request a token balance for a given address",
        usage: "bank balance <denom> <address>",
        inputs: [
            {
                requestMessage: "Input Denom:",
                default: async () => state_1.default.wallets.currentWalletDenom
            },
            {
                requestMessage: `Input Address${typeof state_1.default.wallets.currentWallet !== "undefined"
                    ? " (Leave empty to see your balance)"
                    : ""}:`,
                validate: (input) => {
                    if (input.length === 0 &&
                        typeof state_1.default.wallets.currentWallet !== "undefined")
                        return true;
                    return (0, utils_1.validateAddressInput)(input);
                },
                default: async () => state_1.default.wallets.currentWalletAddress || ''
            },
        ],
    },
};
/**
 * Sends tokens to a given recipient
 * @param input
 * @returns
 */
async function handleSend(input) {
    const [recipient, amount] = input;
    if (!amount) {
        console.error(`Invalid amount input ${amount}`);
        return;
    }
    const coins = amount;
    const coinsString = coins
        .map((coin) => `${coin.amount}${coin.denom}`)
        .join(", ");
    const confirm = await (0, cmd_1.promptWithExit)({
        type: "confirm",
        name: "confirmsend",
        message: `Are you sure you want to send ${coinsString} to ${recipient}?`,
    });
    if (!confirm.confirmsend)
        return;
    const resp = await (0, common_1.displaySpinnerAsync)("Sending tokens...", async () => await client.sendTokens(recipient, coins));
    console.log();
    console.log(picocolors_1.default.green(`Sent ${coinsString} to ${recipient}!`));
    (0, common_1.printTransactionUrl)(resp?.transactionHash);
}
/**
 * Queries token balance for a given address. Uses current wallet if no address is provided.
 * @param inputs
 */
async function handleBalance(inputs) {
    const [denom, addr] = inputs;
    const resp = await client.getBalance(denom, addr);
    console.log(resp);
    console.log();
    console.log(picocolors_1.default.bold("Balance"));
    console.log(`${denom}: ${resp ? `${picocolors_1.default.green(resp.amount)}` : 0}`);
}
exports.default = exports.commands;
