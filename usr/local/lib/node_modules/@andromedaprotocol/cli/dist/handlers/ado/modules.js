"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_table_1 = __importDefault(require("cli-table"));
const picocolors_1 = __importDefault(require("picocolors"));
const cmd_1 = require("../../cmd");
const common_1 = require("../../common");
const state_1 = __importDefault(require("../../state"));
const utils_1 = require("../utils");
const wasm_1 = require("../wasm");
const common_2 = require("./common");
const { client, wallets } = state_1.default;
const commands = {
    list: {
        description: "Lists all modules for an ADO",
        usage: "ado modules list <address>",
        handler: listModulesHandler,
        color: picocolors_1.default.cyan,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    add: {
        description: "Adds a module to an ADO",
        usage: "ado modules add <address>",
        handler: addModuleHandler,
        color: picocolors_1.default.blue,
        flags: common_1.executeFlags,
        disabled: () => !wallets.currentWallet,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    rm: {
        description: "Removes a module from an ADO",
        usage: "ado modules rm <address>",
        handler: removeModuleHandler,
        color: picocolors_1.default.red,
        flags: common_1.executeFlags,
        disabled: () => !wallets.currentWallet,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    edit: {
        description: "Edits an already added module attached to an ADO",
        usage: "ado modules edit <address>",
        handler: editModuleHandler,
        color: picocolors_1.default.yellow,
        flags: common_1.executeFlags,
        disabled: () => !wallets.currentWallet,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
};
/**
 * Queries if an ADO implements modules
 * @param address
 * @returns
 */
async function implementsModules(address) {
    try {
        await (0, wasm_1.queryMessage)(address, client.ado.moduleIdsQuery());
        return true;
    }
    catch (error) {
        return false;
    }
}
/**
 * Gets modules for a given ADO address
 * @param address
 * @returns
 */
async function getADOModules(address) {
    const modules = await (0, common_1.displaySpinnerAsync)("Querying modules...", async () => await client.ado.getModules(address));
    return modules;
}
/**
 * Prompts the user for details about a module, defaults are set to the module provided as the first parameter if it is provided
 * @param module
 * @returns The created Module
 */
async function promptForModule(module) {
    const { module_type } = await (0, cmd_1.promptWithExit)({
        type: "input",
        default: module ? module.module_type : undefined,
        message: `Input the module type${module ? ` (currently: ${module.module_type})` : ""}:`,
        name: "module_type",
    });
    const { address } = await (0, cmd_1.promptWithExit)({
        type: "input",
        default: module ? module.address.identifier : undefined,
        message: `Input the module address${module ? ` (currently: ${module.address.identifier})` : ""}:`,
        name: "address",
        validate: utils_1.validateAddressInput,
    });
    const { is_mutable } = await (0, cmd_1.promptWithExit)({
        type: "confirm",
        default: module ? module.is_mutable : undefined,
        message: `Should this module be mutable?${module ? ` (currently: ${module.address.identifier})` : ""}`,
        name: "is_mutable",
    });
    return {
        module_type,
        is_mutable,
        address: {
            identifier: address,
        },
    };
}
/**
 * Adds a module to an ADO
 * @param input
 * @param flags
 */
async function addModuleHandler(input, flags) {
    const [address] = input;
    const currWallet = wallets.currentWalletAddress;
    if (!(0, common_2.isADOOwner)(address, currWallet))
        throw new Error("Cannot add modules to an ADO you do not own");
    if (!(await implementsModules(address)))
        throw new Error("Address does not implement ADO Modules");
    const module = await promptForModule();
    const msg = client.ado.registerModuleMsg(module);
    await (0, wasm_1.executeMessage)(address, msg, flags, "Module registered!");
}
/**
 * Lists all current modules attached to an ADO
 * @param input
 */
async function listModulesHandler(input) {
    const [address] = input;
    const modules = await getADOModules(address);
    const table = new cli_table_1.default(common_1.logTableConfig);
    table.push([
        picocolors_1.default.bold(""),
        picocolors_1.default.bold("Type"),
        picocolors_1.default.bold("Address"),
        picocolors_1.default.bold("Mutable"),
    ]);
    modules.forEach((mod) => table.push([
        mod.idx.toString(),
        mod.module_type,
        mod.address.identifier,
        picocolors_1.default.bold(mod.is_mutable ? picocolors_1.default.green("âœ“") : picocolors_1.default.red("x")),
    ]));
    console.log();
    console.log(table.toString());
}
/**
 * Removes a module from an ADO
 * @param input
 * @param flags
 */
async function removeModuleHandler(input, flags) {
    const [address] = input;
    const currWallet = wallets.currentWalletAddress;
    if (!(0, common_2.isADOOwner)(address, currWallet))
        throw new Error("Cannot add modules to an ADO you do not own");
    if (!(await implementsModules(address)))
        throw new Error("Address does not implement ADO Modules");
    const modules = await getADOModules(address);
    const rmChoice = await (0, cmd_1.promptWithExit)({
        type: "list",
        name: "rm",
        choices: modules
            .filter((mod) => mod.is_mutable)
            .map((mod) => ({
            name: `(${mod.idx}) ${mod.module_type} ${mod.address.identifier}`,
            value: mod.idx,
        })),
        message: "Choose which module to remove:",
    });
    await (0, wasm_1.executeMessage)(address, client.ado.deregisterModuleMsg(rmChoice.rm), flags, "Module removed!");
}
/**
 * Edits a module attached to an ADO
 * @param input
 * @param flags
 */
async function editModuleHandler(input, flags) {
    const [address] = input;
    const currWallet = wallets.currentWalletAddress;
    if (!(0, common_2.isADOOwner)(address, currWallet))
        throw new Error("Cannot add modules to an ADO you do not own");
    if (!(await implementsModules(address)))
        throw new Error("Address does not implement ADO Modules");
    const modules = await getADOModules(address);
    if (modules.filter((mod) => mod.is_mutable).length === 0)
        throw new Error("This ADO does not have any mutable modules");
    const editChoice = await (0, cmd_1.promptWithExit)({
        type: "list",
        name: "edit",
        choices: [
            ...modules
                .filter((mod) => mod.is_mutable)
                .map((mod) => ({
                name: `(${mod.idx}) ${mod.module_type} ${mod.address.identifier}`,
                value: mod,
            })),
            "exit",
        ],
        message: "Choose which module to edit:",
    });
    const updated = await promptForModule(editChoice.edit);
    await (0, wasm_1.executeMessage)(address, client.ado.alterModuleMsg(editChoice.edit.idx, updated), flags, "Module updated!");
}
exports.default = commands;
