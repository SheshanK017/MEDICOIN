"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commands = void 0;
const andromeda_js_1 = require("@andromedaprotocol/andromeda.js");
const picocolors_1 = __importDefault(require("picocolors"));
const cli_table_1 = __importDefault(require("cli-table"));
const lodash_1 = __importDefault(require("lodash"));
const common_1 = require("../common");
const config_1 = __importDefault(require("../config"));
const utils_1 = require("./utils");
const state_1 = __importDefault(require("../state"));
const { client } = state_1.default;
exports.commands = {
    info: {
        handler: txInfoHandler,
        color: picocolors_1.default.blue,
        description: "Gets transaction info from provided hash",
        usage: "tx info <hash>",
        inputs: [
            {
                requestMessage: "Input Transaction Hash:",
            },
        ],
    },
    byaddress: {
        handler: txAddressHandler,
        color: picocolors_1.default.green,
        description: "Gets a history of transactions for a given address",
        usage: "tx byaddress <address>",
        inputs: [
            {
                requestMessage: "Input Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    history: {
        handler: txHistoryHandler,
        color: picocolors_1.default.magenta,
        description: "Gets a history of transactions for your current wallet",
        usage: "tx history",
        disabled: () => typeof state_1.default.wallets.currentWallet === "undefined",
    },
};
/**
 * Prints all info about a transaction for a given hash
 * @param input
 */
async function txInfoHandler(input) {
    const [hash] = input;
    const txInfo = await client.getTx(hash);
    if (!txInfo) {
        console.log(picocolors_1.default.red("Transaction info not found"));
        return;
    }
    console.log("Transaction Info:");
    console.log(JSON.stringify((0, andromeda_js_1.cleanTx)(txInfo), null, 2));
}
/**
 * Prints all transactions and their types by a given address
 * @param inputs
 */
async function txAddressHandler(inputs) {
    const [addr] = inputs;
    const txInfo = await client.getAllTxsByAddress(addr);
    if (txInfo.length === 0)
        throw new Error("No transactions found");
    const urls = config_1.default.get("chain.blockExplorerTxPages");
    const txTable = new cli_table_1.default(common_1.logTableConfig);
    txTable.push(["Hash", "Height", "Type", "Link"].map((str) => picocolors_1.default.bold(str)));
    txInfo.map(andromeda_js_1.cleanTx).forEach((tx) => {
        const [txTypeAttr] = (0, andromeda_js_1.getAttribute)("message.action", tx.rawLog);
        const txType = (txTypeAttr ? lodash_1.default.last(txTypeAttr.value.split(".")) : "") ?? "";
        txTable.push([
            tx.hash,
            `${tx.height}`,
            txType,
            urls.length > 0 ? (0, andromeda_js_1.getTxExplorerURL)(tx.hash, urls[0]) : "",
        ]);
    });
    console.log();
    console.log(txTable.toString());
}
/**
 * Prints all transactions and their types for the current wallet
 */
async function txHistoryHandler() {
    const walletAddr = state_1.default.wallets.currentWalletAddress;
    if (!walletAddr)
        throw new Error("No wallet currently assigned");
    await txAddressHandler([walletAddr]);
}
exports.default = exports.commands;
