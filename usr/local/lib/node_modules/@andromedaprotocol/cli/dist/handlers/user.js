"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commands = void 0;
const picocolors_1 = __importDefault(require("picocolors"));
const cmd_1 = require("../cmd");
const common_1 = require("../common");
const state_1 = __importDefault(require("../state"));
const wasm_1 = require("./wasm");
const { client } = state_1.default;
exports.commands = {
    register: {
        handler: registerHandler,
        color: picocolors_1.default.magenta,
        description: "Registers a username for an address",
        usage: "user register",
        flags: common_1.executeFlags,
    },
    getusername: {
        handler: async () => {
            if (!client.os.vfs?.address)
                throw new Error("VFS has no assigned address");
            const walletAddr = state_1.default.wallets.currentWalletAddress;
            if (!walletAddr)
                throw new Error("No wallet currently assigned");
            const resp = await client.os.vfs?.getUsername(walletAddr);
            console.log(JSON.stringify(resp, null, 2));
        },
        color: picocolors_1.default.cyan,
        description: "Gets the username claimed to an address",
        usage: "user getusername",
    },
};
/**
 * Registers a username to an address
 * @param flags
 */
async function registerHandler(flags) {
    if (!client.os.vfs?.address)
        throw new Error("VFS has no assigned address");
    const walletAddr = state_1.default.wallets.currentWalletAddress;
    if (!walletAddr)
        throw new Error("No wallet currently assigned");
    const resp = await client.os.vfs?.getUsername(walletAddr);
    console.log(`You already have ${JSON.stringify(resp, null, 2)} registered for your account`);
    let username;
    while (!(await validateUsername(username))) {
        if (username)
            console.error(picocolors_1.default.red("The username must be alphanumeric characters"));
        const usernameInput = await (0, cmd_1.promptWithExit)({
            type: "input",
            message: "Input the username:",
            name: "addUsername",
            validate: (input) => {
                return input.trim().length > 0;
            },
        });
        username = usernameInput.addUsername.trim();
        if (username === "exit")
            return;
    }
    const msgReg = await client.os.vfs?.registerUserMsg(username);
    await (0, wasm_1.executeMessage)(client.os.vfs?.address, msgReg, flags, "Username claimed!"); //TODO: ADD FEE FLAG
}
/**
 * Validates input username
 * @param input
 * @returns boolean
 */
async function validateUsername(input) {
    const usernameRegex = new RegExp(/^[a-z0-9]+$/i);
    return usernameRegex.test(input ?? '');
}
exports.default = exports.commands;
