"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_table_1 = __importDefault(require("cli-table"));
const picocolors_1 = __importDefault(require("picocolors"));
const common_1 = require("../../common");
const state_1 = __importDefault(require("../../state"));
const utils_1 = require("../utils");
const wasm_1 = require("../wasm");
const common_2 = require("./common");
const { client, wallets } = state_1.default;
const commands = {
    add: {
        description: "Adds an operator to an ADO",
        usage: "ado operators add <address> <new operator address>",
        handler: addOperatorHandler,
        color: picocolors_1.default.blue,
        flags: common_1.executeFlags,
        disabled: () => !wallets.currentWallet,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
            {
                requestMessage: "Input the Operator Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    list: {
        description: "Lists all operators for an ADO",
        usage: "ado operators list <address>",
        handler: listOperatorsHandler,
        color: picocolors_1.default.cyan,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    rm: {
        description: "Removes an operator from an ADO",
        usage: "ado operators rm <address> <operator address to remove>",
        handler: removeOperatorHandler,
        color: picocolors_1.default.red,
        flags: common_1.executeFlags,
        disabled: () => !wallets.currentWallet,
        inputs: [
            {
                requestMessage: "Input the ADO Address:",
                validate: utils_1.validateAddressInput,
            },
            {
                requestMessage: "Input the Operator Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
};
/**
 * Queries all operators for a given ADO
 * @param address
 * @returns
 */
async function getADOOperators(address) {
    const { operators } = await (0, wasm_1.queryMessage)(address, client.ado.operatorsQuery(), "Querying operators...");
    return operators;
}
/**
 * Adds an operator to an ADO
 * @param input
 * @param flags
 */
async function addOperatorHandler(input, flags) {
    const [address, operator] = input;
    const currWallet = wallets.currentWalletAddress;
    if (!(await (0, common_2.isADOOwner)(address, currWallet)))
        throw new Error("Cannot add operators to an ADO you do not own");
    const operators = await getADOOperators(address);
    if (operators.includes(operator))
        throw new Error("Address is already an operator for this ADO");
    const msg = client.ado.updateOperatorsMsg([...operators, operator]);
    await (0, wasm_1.executeMessage)(address, msg, flags, "Operator added!");
}
/**
 * Lists all operators for an ADO
 * @param input
 */
async function listOperatorsHandler(input) {
    const [address] = input;
    const operators = await getADOOperators(address);
    const table = new cli_table_1.default(common_1.logTableConfig);
    table.push([picocolors_1.default.bold("Operator Address")]);
    operators.forEach((op) => table.push([op]));
    console.log();
    console.log(table.toString());
}
/**
 * Removes an operator from an ADO
 * @param input
 * @param flags
 */
async function removeOperatorHandler(input, flags) {
    const [address, operator] = input;
    const currWallet = wallets.currentWalletAddress;
    if (!(await (0, common_2.isADOOwner)(address, currWallet)))
        throw new Error("Cannot remove operators from an ADO you do not own");
    const operators = await getADOOperators(address);
    if (!operators.includes(operator))
        throw new Error("Address is not an operator");
    const msg = client.ado.updateOperatorsMsg(operators.filter((addr) => addr !== operator));
    await (0, wasm_1.executeMessage)(address, msg, flags, "Operator removed!");
}
exports.default = commands;
