"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const andromeda_js_1 = require("@andromedaprotocol/andromeda.js");
const cli_table_1 = __importDefault(require("cli-table"));
const picocolors_1 = __importDefault(require("picocolors"));
const common_1 = require("../common");
const state_1 = __importDefault(require("../state"));
const utils_1 = require("./utils");
const commands = {
    app: {
        handler: appHandler,
        usage: "gql app <contract address>",
        color: picocolors_1.default.green,
        description: "Queries details about an app",
        inputs: [
            {
                requestMessage: "Input the Address:",
                validate: utils_1.validateAddressInput,
            },
        ],
    },
    assets: {
        handler: assetsHandler,
        usage: "gql assets",
        color: picocolors_1.default.blue,
        disabled: () => typeof state_1.default.wallets.currentWallet === "undefined",
        description: "Queries details about your deployed apps and ADOs for the current chain",
        flags: {
            type: {
                description: "Filter assets by ADO type",
                usage: "--type cw721",
            },
        },
    },
};
/**
 * Prints an app by a given address in table format
 * @param input
 */
async function appHandler(input) {
    let [address] = input;
    try {
        const app = await (0, common_1.displaySpinnerAsync)("Searching the Cosmos...", async () => await (0, andromeda_js_1.queryApp)(address));
        const { config: { name, owner }, components, } = app;
        console.log(`${picocolors_1.default.bold("Owner:")} ${owner}`);
        console.log(`${picocolors_1.default.bold("App Name:")} ${name}`);
        console.log();
        const componentTable = new cli_table_1.default(common_1.logTableConfig);
        console.log(picocolors_1.default.bold("Components"));
        components.forEach((comp) => {
            componentTable.push([comp.name, comp.ado_type, comp.address]);
        });
        console.log(componentTable.toString());
    }
    catch (error) {
        const { message } = error;
        if (message.includes(":")) {
            console.error(picocolors_1.default.red(message.split(":")[0]));
        }
        else {
            console.error(picocolors_1.default.red(message));
        }
    }
}
/**
 * Prints all ADOs/assets owned by the current wallet
 * @param _input
 * @param flags
 */
async function assetsHandler(_input, flags) {
    const walletAddr = state_1.default.wallets.currentWalletAddress;
    if (!walletAddr)
        throw new Error("No wallet currently assigned");
    const { type } = flags;
    const assets = await (0, common_1.displaySpinnerAsync)("Searching the Cosmos...", async () => await (0, andromeda_js_1.queryAssets)(walletAddr, 0, 0));
    const assetsTable = new cli_table_1.default({
        ...common_1.logTableConfig,
    });
    assetsTable.push([
        picocolors_1.default.bold("Address"),
        picocolors_1.default.bold("ADO Type"),
        picocolors_1.default.bold("App Contract"),
    ]);
    assets.forEach((asset) => {
        if (type && asset.adoType !== type)
            return;
        assetsTable.push([asset.address, asset.adoType, asset.appContract ?? ""]);
    });
    console.log(assetsTable.toString());
}
exports.default = commands;
