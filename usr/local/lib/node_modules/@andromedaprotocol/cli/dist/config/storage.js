"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addExitHandler = exports.storageFileExists = exports.writeStorageFile = exports.loadStorageFile = exports.CONFIG_DIRECTORY = void 0;
/**
 * This file provides several functions used to store and load any configs or wallets used by the CLI
 */
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
/**
 * Where the config files are stored.
 * *Note: Currently only supports UNIX file system*
 */
exports.CONFIG_DIRECTORY = process.env.ANDR_CONFIG_DIR ?? path_1.default.join(os_1.default.homedir(), ".andr-cli"); //TODO: Make work on non-UNIX
if (!fs_1.default.existsSync(exports.CONFIG_DIRECTORY)) {
    fs_1.default.mkdirSync(exports.CONFIG_DIRECTORY);
}
/**
 * Loads a stored file
 * @param file The path to the file to load
 * @returns A buffer containing the file data
 */
function loadStorageFile(file) {
    const filePath = path_1.default.join(exports.CONFIG_DIRECTORY, file);
    if (!fs_1.default.existsSync(filePath)) {
        throw new Error(`File ${file} does not exist`);
    }
    return fs_1.default.readFileSync(filePath);
}
exports.loadStorageFile = loadStorageFile;
/**
 * Writes to s a stored file
 * @param file The path of where to write the data
 * @param data The data to write
 */
function writeStorageFile(file, data) {
    const filePath = path_1.default.join(exports.CONFIG_DIRECTORY, file);
    fs_1.default.writeFileSync(filePath, data);
}
exports.writeStorageFile = writeStorageFile;
/**
 * Checks if a stored file exists
 * @param file The file to check for
 * @returns
 */
function storageFileExists(file) {
    const filePath = path_1.default.join(exports.CONFIG_DIRECTORY, file);
    return fs_1.default.existsSync(filePath);
}
exports.storageFileExists = storageFileExists;
/**
 * Handlers to call when the CLI is exited
 */
const exitHandlers = [];
/**
 * Adds an exit listener to each possible 'exit' event
 */
function addExitListener() {
    const listener = () => {
        exitHandlers.forEach((handler) => handler());
        process.exit(0);
    };
    //All possible exit events
    const events = [
        "exit",
        "SIGINT",
        "SIGTSTP",
        "SIGUSR1",
        "SIGUSR2",
        "uncaughtException",
    ];
    events.forEach((ev) => {
        try {
            process.on(ev, listener);
        }
        catch (error) {
            console.error(error);
        }
    });
}
// Adds the exit listener on startup
addExitListener();
/**
 * Add another handler for when the CLI exits. Handlers are added to an array that is checked by the listener upon exiting.
 * @param exitHandler
 */
function addExitHandler(exitHandler) {
    exitHandlers.push(exitHandler);
}
exports.addExitHandler = addExitHandler;
