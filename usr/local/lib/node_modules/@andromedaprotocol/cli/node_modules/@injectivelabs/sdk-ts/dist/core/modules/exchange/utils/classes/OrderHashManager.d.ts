import { Network } from '@injectivelabs/networks';
interface OrderInfo {
    subaccountId: string;
    feeRecipient: string;
    price: string;
    quantity: string;
}
interface SpotOrder {
    marketId: string;
    orderInfo: OrderInfo;
    orderType: string;
    triggerPrice?: string;
}
interface DerivativeOrder extends SpotOrder {
    margin: string;
}
export declare class OrderHashManager {
    subaccountIndex: number;
    address: string;
    network: Network;
    constructor({ network, address, subaccountIndex, }: {
        network: Network;
        address: string;
        subaccountIndex?: number;
    });
    getOrderHashes({ spotOrders, derivativeOrders, }: {
        spotOrders: SpotOrder[];
        derivativeOrders: DerivativeOrder[];
    }): Promise<{
        derivativeOrderHashes: string[];
        spotOrderHashes: string[];
    }>;
    getDerivativeOrderHashes(orders: DerivativeOrder[]): Promise<string[]>;
    getSpotOrderHashes(orders: SpotOrder[]): Promise<string[]>;
    private getSubaccountNonce;
    private hashTypedData;
}
export {};
//# sourceMappingURL=OrderHashManager.d.ts.map