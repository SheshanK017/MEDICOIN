"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddressFromInjectiveAddress = exports.getEthereumAddress = exports.getInjectiveAddress = void 0;
const bech32_1 = require("bech32");
const ethereumjs_util_1 = require("ethereumjs-util");
/**
 * Get injective address from Ethereum hex address
 *
 * @param ethAddress string
 * @returns string
 */
const getInjectiveAddress = (ethAddress) => {
    const addressBuffer = ethereumjs_util_1.Address.fromString(ethAddress.toString()).toBuffer();
    return bech32_1.bech32.encode('inj', bech32_1.bech32.toWords(addressBuffer));
};
exports.getInjectiveAddress = getInjectiveAddress;
/**
 * Get ethereum address from injective bech32 address
 *
 * @param ethAddress string
 * @returns string
 */
const getEthereumAddress = (injectiveAddress) => {
    if (injectiveAddress.startsWith('0x')) {
        return injectiveAddress;
    }
    return `0x${Buffer.from(bech32_1.bech32.fromWords(bech32_1.bech32.decode(injectiveAddress).words)).toString('hex')}`;
};
exports.getEthereumAddress = getEthereumAddress;
/** @deprecated - use getEthereumAddress */
const getAddressFromInjectiveAddress = (address) => {
    if (address.startsWith('0x')) {
        return address;
    }
    return `0x${Buffer.from(bech32_1.bech32.fromWords(bech32_1.bech32.decode(address).words)).toString('hex')}`;
};
exports.getAddressFromInjectiveAddress = getAddressFromInjectiveAddress;
//# sourceMappingURL=address.js.map