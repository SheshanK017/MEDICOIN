import { ComposerResponse } from '@injectivelabs/ts-types';
export declare const sleep: (timeout: number) => Promise<void>;
/**
 * When we want to execute the promises in batch
 */
export declare const awaitAll: <T, S>(array: T[], callback: (item: T) => Promise<S>) => Promise<Awaited<S>[]>;
/**
 * When we want to execute the promises one by one
 * and not all in batch as with await Promise.all()
 */
export declare const awaitForAll: <T, S>(array: T[], callback: (item: T) => Promise<S>) => Promise<S[]>;
export declare const isServerSide: () => boolean;
export declare const mapMultipleComposerResponseMessages: <T, R>(messages: ComposerResponse<T, R>[]) => {
    web3GatewayMessage: R[];
    directBroadcastMessage: {
        type: string;
        message: T;
    }[];
};
export declare const getStdFeeForToken: (token?: {
    denom: string;
    decimals: number;
}, gasPrice?: string) => {
    amount: {
        denom: string;
        amount: string;
    }[];
    gas: string;
};
export declare const getStdFee: (gas?: string, gasPrice?: number) => {
    amount: {
        denom: string;
        amount: string;
    }[];
    gas: string;
};
export declare const getDefaultStdFee: () => {
    amount: {
        amount: string;
        denom: string;
    }[];
    gas: string;
};
//# sourceMappingURL=helpers.d.ts.map