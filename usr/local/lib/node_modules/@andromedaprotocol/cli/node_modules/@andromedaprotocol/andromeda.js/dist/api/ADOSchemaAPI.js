"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ADOAPI_1 = __importDefault(require("./ADOAPI"));
class ADODSchemaAPI extends ADOAPI_1.default {
    constructor(client, address) {
        super(client, address);
        this.address = address;
    }
    /**
     * Provides a message object for the Primitive DB's `GetKeyValue` query
     * @param key
     * @returns
     */
    getValueQuery(key) {
        return {
            get_value: {
                key: key,
            },
        };
    }
    /**
     * Gets the schema for the key in schemadb
     * @param key
     * @param address
     * @returns
     */
    async getSchemaFromKey(key, address) {
        const msg = this.getValueQuery(key);
        const res = await this.client.queryContract(address ?? this.address, msg);
        const schema = JSON.parse(res.value.string);
        return {
            schema, key
        };
    }
    /**
     * Gets the schema for the codeId
     * @param key
     * @param address
     * @returns
     */
    async getSchemaFromCodeId(codeId, address) {
        return this.getSchemaFromKey(codeId.toString(), address);
    }
    /**
   * Gets the schema for the adoType. First fetch the codeId from adodb and then use the codeId to get the schema
   * @param key
   * @param address
   * @returns
   */
    async getSchemaFromAdoType(adoType, address) {
        const codeId = await this.client.os.adoDB.getCodeId(adoType);
        return this.getSchemaFromCodeId(codeId, address);
    }
    /**
    * Gets the sub schema, like receive schema, from the codeId. Similar to getSchemaFromCodeId
    * @param key
    * @param address
    * @returns
    */
    async getSubSchemaFromCodeId(codeId, subKey, address) {
        const key = `${codeId}-${subKey}`;
        return this.getSchemaFromKey(key, address);
    }
    /**
    * Get the sub schema, like receive schema, from adoType. Similar to getSchemaFromAdoType
    * @param key
    * @param address
    * @returns
    */
    async getSubSchemaFromAdoType(adoType, subKey, address) {
        const codeId = await this.client.os.adoDB.getCodeId(adoType);
        return this.getSubSchemaFromCodeId(codeId, subKey, address);
    }
}
exports.default = ADODSchemaAPI;
