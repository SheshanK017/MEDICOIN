import { Schema } from "jsonschema";
import ADOAPI from "./ADOAPI";
import AndromedaClient, { ContractSchema } from "../index";
export default class ADODSchemaAPI extends ADOAPI {
    address: string;
    constructor(client: AndromedaClient, address: string);
    /**
     * Provides a message object for the Primitive DB's `GetKeyValue` query
     * @param key
     * @returns
     */
    getValueQuery(key: string): {
        get_value: {
            key: string;
        };
    };
    /**
     * Gets the schema for the key in schemadb
     * @param key
     * @param address
     * @returns
     */
    getSchemaFromKey<T = ContractSchema>(key: string, address?: string): Promise<{
        schema: T;
        key: string;
    }>;
    /**
     * Gets the schema for the codeId
     * @param key
     * @param address
     * @returns
     */
    getSchemaFromCodeId(codeId: number, address?: string): Promise<{
        schema: ContractSchema;
        key: string;
    }>;
    /**
   * Gets the schema for the adoType. First fetch the codeId from adodb and then use the codeId to get the schema
   * @param key
   * @param address
   * @returns
   */
    getSchemaFromAdoType(adoType: string, address?: string): Promise<{
        schema: ContractSchema;
        key: string;
    }>;
    /**
    * Gets the sub schema, like receive schema, from the codeId. Similar to getSchemaFromCodeId
    * @param key
    * @param address
    * @returns
    */
    getSubSchemaFromCodeId(codeId: number, subKey: string, address?: string): Promise<{
        schema: Schema;
        key: string;
    }>;
    /**
    * Get the sub schema, like receive schema, from adoType. Similar to getSchemaFromAdoType
    * @param key
    * @param address
    * @returns
    */
    getSubSchemaFromAdoType(adoType: string, subKey: string, address?: string): Promise<{
        schema: Schema;
        key: string;
    }>;
}
